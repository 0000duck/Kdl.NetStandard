//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Kdl {

public class ChainIkSolverPos_NR_JL : ChainIkSolverPos {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChainIkSolverPos_NR_JL(global::System.IntPtr cPtr, bool cMemoryOwn) : base(kdlPINVOKE.ChainIkSolverPos_NR_JL_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChainIkSolverPos_NR_JL obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          kdlPINVOKE.delete_ChainIkSolverPos_NR_JL(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChainIkSolverPos_NR_JL(Chain chain, JntArray q_min, JntArray q_max, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver, uint maxiter, double eps) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_0(Chain.getCPtr(chain), JntArray.getCPtr(q_min), JntArray.getCPtr(q_max), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver), maxiter, eps), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_NR_JL(Chain chain, JntArray q_min, JntArray q_max, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver, uint maxiter) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_1(Chain.getCPtr(chain), JntArray.getCPtr(q_min), JntArray.getCPtr(q_max), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver), maxiter), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_NR_JL(Chain chain, JntArray q_min, JntArray q_max, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_2(Chain.getCPtr(chain), JntArray.getCPtr(q_min), JntArray.getCPtr(q_max), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_NR_JL(Chain chain, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver, uint maxiter, double eps) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_3(Chain.getCPtr(chain), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver), maxiter, eps), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_NR_JL(Chain chain, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver, uint maxiter) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_4(Chain.getCPtr(chain), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver), maxiter), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChainIkSolverPos_NR_JL(Chain chain, ChainFkSolverPos fksolver, ChainIkSolverVel iksolver) : this(kdlPINVOKE.new_ChainIkSolverPos_NR_JL__SWIG_5(Chain.getCPtr(chain), ChainFkSolverPos.getCPtr(fksolver), ChainIkSolverVel.getCPtr(iksolver)), true) {
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int CartToJnt(JntArray q_init, Frame p_in, JntArray q_out) {
    int ret = kdlPINVOKE.ChainIkSolverPos_NR_JL_CartToJnt(swigCPtr, JntArray.getCPtr(q_init), Frame.getCPtr(p_in), JntArray.getCPtr(q_out));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int setJointLimits(JntArray q_min, JntArray q_max) {
    int ret = kdlPINVOKE.ChainIkSolverPos_NR_JL_setJointLimits(swigCPtr, JntArray.getCPtr(q_min), JntArray.getCPtr(q_max));
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void updateInternalDataStructures() {
    kdlPINVOKE.ChainIkSolverPos_NR_JL_updateInternalDataStructures(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
  }

  public override string strError(int error) {
    string ret = kdlPINVOKE.ChainIkSolverPos_NR_JL_strError(swigCPtr, error);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getChildFkStatus() {
    int ret = kdlPINVOKE.ChainIkSolverPos_NR_JL_getChildFkStatus(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getChildIkStatus() {
    int ret = kdlPINVOKE.ChainIkSolverPos_NR_JL_getChildIkStatus(swigCPtr);
    if (kdlPINVOKE.SWIGPendingException.Pending) throw kdlPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int E_IKSOLVERVEL_FAILED = kdlPINVOKE.ChainIkSolverPos_NR_JL_E_IKSOLVERVEL_FAILED_get();
  public static readonly int E_FKSOLVERPOS_FAILED = kdlPINVOKE.ChainIkSolverPos_NR_JL_E_FKSOLVERPOS_FAILED_get();
}

}
